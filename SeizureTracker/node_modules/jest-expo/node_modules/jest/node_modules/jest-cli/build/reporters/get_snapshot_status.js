'use strict';

<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", {
  value: true
});


const chalk = require('chalk'); /**
                                 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                 *
                                 * This source code is licensed under the MIT license found in the
                                 * LICENSE file in the root directory of this source tree.
                                 *
                                 * 
                                 */
=======
Object.defineProperty(exports, '__esModule', {
  value: true
});

const chalk = require('chalk');
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */
>>>>>>> master

var _require = require('./utils');

const pluralize = _require.pluralize;

<<<<<<< HEAD

const ARROW = ' \u203A ';
const FAIL_COLOR = chalk.bold.red;
const SNAPSHOT_ADDED = chalk.bold.green;
const SNAPSHOT_REMOVED = chalk.bold.red;
const SNAPSHOT_UPDATED = chalk.bold.green;
=======
const ARROW = ' \u203A ';
const DOT = ' \u2022 ';
const FAIL_COLOR = chalk.bold.red;
const SNAPSHOT_ADDED = chalk.bold.green;
const SNAPSHOT_UPDATED = chalk.bold.green;
const SNAPSHOT_OUTDATED = chalk.bold.yellow;
>>>>>>> master

exports.default = (snapshot, afterUpdate) => {
  const statuses = [];

  if (snapshot.added) {
<<<<<<< HEAD
    statuses.push(SNAPSHOT_ADDED(ARROW + pluralize('snapshot', snapshot.added)) + ' written.');
  }

  if (snapshot.updated) {
    statuses.push(SNAPSHOT_UPDATED(ARROW + pluralize('snapshot', snapshot.updated)) + ` updated.`);
  }

  if (snapshot.unchecked) {
    statuses.push(FAIL_COLOR(ARROW + pluralize('obsolete snapshot', snapshot.unchecked)) + (afterUpdate ? ' removed' : ' found') + '.');

    snapshot.uncheckedKeys.forEach(key => {
      statuses.push(FAIL_COLOR(`  - ${key}`));
=======
    statuses.push(
      SNAPSHOT_ADDED(
        ARROW + pluralize('snapshot', snapshot.added) + ' written.'
      )
    );
  }

  if (snapshot.updated) {
    statuses.push(
      SNAPSHOT_UPDATED(
        ARROW + pluralize('snapshot', snapshot.updated) + ' updated.'
      )
    );
  }

  if (snapshot.unmatched) {
    statuses.push(
      FAIL_COLOR(ARROW + pluralize('snapshot', snapshot.unmatched) + ' failed.')
    );
  }

  if (snapshot.unchecked) {
    if (afterUpdate) {
      statuses.push(
        SNAPSHOT_UPDATED(
          ARROW + pluralize('snapshot', snapshot.unchecked) + ' removed.'
        )
      );
    } else {
      statuses.push(
        SNAPSHOT_OUTDATED(
          ARROW + pluralize('snapshot', snapshot.unchecked) + ' obsolete'
        ) + '.'
      );
    }

    snapshot.uncheckedKeys.forEach(key => {
      statuses.push(`  ${DOT}${key}`);
>>>>>>> master
    });
  }

  if (snapshot.fileDeleted) {
<<<<<<< HEAD
    statuses.push(SNAPSHOT_REMOVED(ARROW + 'Obsolete snapshot file') + ` removed.`);
  }

  if (snapshot.unmatched) {
    statuses.push(FAIL_COLOR(ARROW + pluralize('snapshot test', snapshot.unmatched)) + ' failed.');
  }
  return statuses;
};
=======
    statuses.push(SNAPSHOT_UPDATED(ARROW + 'snapshot file removed.'));
  }

  return statuses;
};
>>>>>>> master
