'use strict';

<<<<<<< HEAD
Object.defineProperty(exports, "__esModule", {
=======
Object.defineProperty(exports, '__esModule', {
>>>>>>> master
  value: true
});
exports.default = shouldInstrument;

var _path;

function _load_path() {
<<<<<<< HEAD
  return _path = _interopRequireDefault(require('path'));
=======
  return (_path = _interopRequireDefault(require('path')));
>>>>>>> master
}

var _jestRegexUtil;

function _load_jestRegexUtil() {
<<<<<<< HEAD
  return _jestRegexUtil = require('jest-regex-util');
=======
  return (_jestRegexUtil = require('jest-regex-util'));
>>>>>>> master
}

var _micromatch;

function _load_micromatch() {
<<<<<<< HEAD
  return _micromatch = _interopRequireDefault(require('micromatch'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MOCKS_PATTERN = new RegExp((0, (_jestRegexUtil || _load_jestRegexUtil()).escapePathForRegex)((_path || _load_path()).default.sep + '__mocks__' + (_path || _load_path()).default.sep)); /**
                                                                                                                                                                                               * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                                                                               *
                                                                                                                                                                                               * This source code is licensed under the MIT license found in the
                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                               *
                                                                                                                                                                                               * 
                                                                                                                                                                                               */
=======
  return (_micromatch = _interopRequireDefault(require('micromatch')));
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

const MOCKS_PATTERN = new RegExp(
  (0, (_jestRegexUtil || _load_jestRegexUtil()).escapePathForRegex)(
    (_path || _load_path()).default.sep +
      '__mocks__' +
      (_path || _load_path()).default.sep
  )
);
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */
>>>>>>> master

function shouldInstrument(filename, options, config) {
  if (!options.collectCoverage) {
    return false;
  }

<<<<<<< HEAD
  if (config.forceCoverageMatch && config.forceCoverageMatch.length && (_micromatch || _load_micromatch()).default.any(filename, config.forceCoverageMatch)) {
=======
  if (
    config.forceCoverageMatch &&
    config.forceCoverageMatch.length &&
    (_micromatch || _load_micromatch()).default.any(
      filename,
      config.forceCoverageMatch
    )
  ) {
>>>>>>> master
    return true;
  }

  if (config.testRegex && filename.match(config.testRegex)) {
    return false;
  }

<<<<<<< HEAD
  if (config.testMatch && config.testMatch.length && (_micromatch || _load_micromatch()).default.any(filename, config.testMatch)) {
=======
  if (
    config.testMatch &&
    config.testMatch.length &&
    (_micromatch || _load_micromatch()).default.any(filename, config.testMatch)
  ) {
>>>>>>> master
    return false;
  }

  if (
<<<<<<< HEAD
  // This configuration field contains an object in the form of:
  // {'path/to/file.js': true}
  options.collectCoverageOnlyFrom && !options.collectCoverageOnlyFrom[filename]) {
=======
    // This configuration field contains an object in the form of:
    // {'path/to/file.js': true}
    options.collectCoverageOnlyFrom &&
    !options.collectCoverageOnlyFrom[filename]
  ) {
>>>>>>> master
    return false;
  }

  if (
<<<<<<< HEAD
  // still cover if `only` is specified
  !options.collectCoverageOnlyFrom && options.collectCoverageFrom && !(0, (_micromatch || _load_micromatch()).default)([(_path || _load_path()).default.relative(config.rootDir, filename)], options.collectCoverageFrom).length) {
    return false;
  }

  if (config.coveragePathIgnorePatterns && config.coveragePathIgnorePatterns.some(pattern => filename.match(pattern))) {
=======
    // still cover if `only` is specified
    !options.collectCoverageOnlyFrom &&
    options.collectCoverageFrom &&
    !(0, (_micromatch || _load_micromatch()).default)(
      [(_path || _load_path()).default.relative(config.rootDir, filename)],
      options.collectCoverageFrom
    ).length
  ) {
    return false;
  }

  if (
    config.coveragePathIgnorePatterns &&
    config.coveragePathIgnorePatterns.some(pattern => filename.match(pattern))
  ) {
>>>>>>> master
    return false;
  }

  if (MOCKS_PATTERN.test(filename)) {
    return false;
  }

  return true;
<<<<<<< HEAD
}
=======
}
>>>>>>> master
